https://drive.google.com/drive/folders/16xxQ2pZYU7D22kXTwnHdrKe-FIjd8DnL?usp=share_link

N players participate in the tournament. (4 ≤ N ≤ 131,072)


N is always given as a power of two. (N =2M, 2 ≤ M ≤ 17)


 


The tournament is played as follows and it keeps going on until the final rankings are determined after several rounds.


① Starting from the left of the tournament bracket, two players in a pair compete in the game.


② Between the two players, the player whose previous ranking is higher wins, while the other player loses.


③ Winners are grouped together as a winner group and the losers are grouped together as a loser group.
This does NOT mean that the winner and loser from another group are grouped together.


④ When it comes to each group, repeat step ① and proceed with the matches until the rankings are determined.
The location of a player within a group follows the order of the competition. (Refer to [Fig. 1])


⑤ The rankings of the winner group are arranged higher than that of the loser group.


 


[Fig. 1] shows the process of the tournament briefly.


While playing the round, arrange higher rankings to the winner group first and the rest to the loser group.


Each group repeats the rounds until the final rankings are determined.




 


The players participating in the tournament hope that the tournament is fair.


A fair tournament refers to the tournament where the final rankings and the previous rankings of players are the same when the tournament is played following the tournament bracket.


For your convenience, the player whose previous ranking is ‘i’ is labeled as “Player i”.


 


However, it is NOT a fair tournament when the tournament is played following the initial tournament bracket.


Therefore, in order to ensure a fair tournament, the arrangement of players should change.


 


[Fig. 2] shows the result of the tournament when it is played following the tournament bracket where players whose previous rankings are 1st, 2nd, 3rd, and 4th are arranged in order.


In the first round, as Players 1 and 3 won, they are brought to the winner group. As Players 2 and 4 lost, they are brought to the loser group.


In the second round, Player 1 won in the winner group so the player ranks first while Player 3, who lost, ranks second.


In the loser group, Player 2 won so the player ranks third while Player 4, who lost, ranks fourth.


After playing the tournament, the final rankings are in the order of Players 1, 3, 2, and 4. Thus, it is NOT a fair tournament.




 


If the locations of Players 2 and 3 are swapped and then the tournament is played, the final rankings will be in the order of Players 1, 2, 3, and 4. Thus, it becomes a fair tournament.


When the locations of Players 2 and 4 are swapped in the previous tournament bracket, it will also lead to a fair tournament.


Thus, there can be many ways to swap the locations of players to create a fair tournament.


[Fig. 3] shows the result of the changes in the players’ locations to create a fair tournament.




 


It is possible to swap two players’ locations several times in order to create a fair tournament as above.


When the initial tournament bracket is given, you are required to write a function that makes the tournament fair by repeating the work of swapping two players’ locations several times.


 


Implement each function so that the tournament is fair by referring to the following API description.


※ The function signature below is based on C/C++. As for other languages, refer to the provided Main and User Code.


 


The following is the description of API to be written in the User Code.


void modifyTournament(int N, int mOrder[])

This function is called in the beginning of each test case.

 

N is the number of players participating in the tournament.

N is always given as a power of two.

 

mOrder is the list of tournament bracket.

The bracket is made up of the players’ previous rankings. The ranking is a number from 1 to N.

There are NO players with the same ranking.

 

mOrder[0] is the player at the leftmost side of the bracket. mOrder[N - 1] is the player at the rightmost side.

 

The given mOrder is NOT a fair tournament.

Therefore, a fair tournament can be created by using swapOrder() given as Main API.

 

Parameters

N : The number of players participating in the tournament (4 ≤ N ≤ 131,072)

mOrder : The list of tournament bracket made of up each player’s previous ranking (1 ≤ Ranking ≤ N)


 


The following is the description of Main API that can be used in the User Code.


void swapOrder(int mIndexA, int mIndexB)

This function swaps two players’ locations in the tournament bracket.

mIndexA and mIndexB are the two players’ locations to be changed in the tournament bracket, respectively.

 

The number of swapOrder calls does NOT affect grading.

 

Parameters

mIndexA : Location A of player to be changed (0 ≤ mIndexA ≤ N - 1)

mIndexB : Location B of player to be changed (0 ≤ mIndexB ≤ N - 1)


 


[Example]


Let’s look into a case where functions are inputted as in [Table 1].


Order

Function

1

modifyTournament(8, [1, 2, 3, 4, 5, 6, 7, 8])


[Table 1]


8 players participate in the tournament.


The previous rankings of players are 1, 2, 3, 4, 5, 6, 7, and 8 as in the order of the tournament bracket.


When the tournament is played following the bracket, Players 1, 3, 5, and 7 are the winners while Players 2, 4, 6, and 8 are the losers in the first round.


The final rankings in the winner group are arranged between 1st and 4th. As Players 5 and 7 are included in the group, the final rankings and the previous rankings are not the same.  


 


[Fig. 4] shows the result of the first round when the tournament is played following the given tournament bracket.




 


Make some changes in the tournament bracket so that the final rankings after the tournament are the same with the previous rankings.


The players whose locations are swapped are as follows.


1) Player 1 ↔ Player 7


2) Player 4 ↔ Player 5


 


After the swap, Players 1, 3, 4, and 2 win while Players 7, 5, 6, and 8 lose in the first round.


The final rankings of the winners will be arranged between 1st and 4th. This range is the same with the range of the previous rankings.


The final rankings of the losers will be arranged between 5th and 8th.  This range is the same with the range of the previous rankings.


 

In the second round, a group is divided depending on the result of win and lose. Then, the tournament is played by each group.


In the winner group of the first round, Players 1 and 2 win while Players 3 and 4 lose.


In the loser group of the first round, Players 5 and 6 win while Players 7 and 8 lose.


When a group is divided depending on the result of win and lose, there would be a total of 4 groups created.


The range of the final rankings in each group is the same with that of the previous rankings of the group’s players.


[Fig. 6] shows the result of the second round.


In the third round, the tournament should be played again by group.


When a group is divided depending on the result of win and lose, there would be a total of 8 groups created with one player in each group.


Thus, the final rankings of all players are determined. The rankings are the same with the previous ones of the players.


As the previous rankings and the final rankings of all the players are the same, it is a fair tournament.


[Constraints]


1. modifyTournament() is called once in the beginning of each test case.


 


[Input and Output]


As the input and output are processed in the provided code in the Main, they are not processed separately in the User Code.


The output result for the sample input is in the format of “#TC number result.” It is the correct answer if the result is 100; it is the wrong answer if it is 0.
///////////
Solution

package com.trandinh;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Solution
{
    private static BufferedReader br;
    private static final UserSolution userSolution = new UserSolution();

    private final static int MAX_N = 131072;
    private final static int[] org = new int[MAX_N];
    private final static int[] winners = new int[MAX_N / 2];
    private final static int[] losers = new int[MAX_N / 2];

    private static int N;
    private static boolean ok;

    public static void swapOrder(int mIndexA, int mIndexB)
    {
        if (!ok || mIndexA < 0 || mIndexA >= N || mIndexB < 0 || mIndexB >= N)
        {
            ok = false;
            return;
        }

        int tmp = org[mIndexA];
        org[mIndexA] = org[mIndexB];
        org[mIndexB] = tmp;
    }

    private static boolean isRightGroup(int s, int e)
    {
        if (e - s <= 1)
            return true;

        int mid = (s + e) / 2;

        for (int i = 0; i < mid - s; i++)
        {
            winners[i] = Math.min(org[s + 2 * i], org[s + 2 * i + 1]);
            losers[i] = Math.max(org[s + 2 * i], org[s + 2 * i + 1]);

            if (winners[i] > mid || losers[i] <= mid)
                return false;
        }

        for (int i = 0; i < mid - s; i++)
        {
            org[s + i] = winners[i];
            org[mid + i] = losers[i];
        }

        return isRightGroup(s, mid) && isRightGroup(mid, e);
    }

    private static boolean run() throws IOException
    {
        ok = true;

        N = Integer.parseInt(br.readLine());

        StringTokenizer stdin = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++)
        {
            org[i] = Integer.parseInt(stdin.nextToken());
        }
        int[] copied = Arrays.copyOf(org, N);

        userSolution.modifyTournament(N, copied);

        return ok && isRightGroup(0, N);
    }

    public static void main(String[] args) throws IOException
    {
        System.setIn(new FileInputStream("sample_input.txt"));
        br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer stinit = new StringTokenizer(br.readLine(), " ");

        int T, MARK;
        T = Integer.parseInt(stinit.nextToken());
        MARK = Integer.parseInt(stinit.nextToken());

        for (int tc = 1; tc <= T; tc++)
        {
            int score = run() ? MARK : 0;
            System.out.printf("#%d %d\n", tc, score);
        }

        br.close();
    }
}

////////////
user
package com.trandinh;

public class UserSolution {

	private final static int MAX_N = 131072;
	private final static int[] org = new int[MAX_N];
	private final static int[] winners = new int[MAX_N / 2];
	private final static int[] losers = new int[MAX_N / 2];
	int mIndices[] = new int[MAX_N + 1];

	public void modifyTournament(int N, int[] mOrder) {
		// 두 명의 선수 위치를 바꾸기 위해 아래와 같이 swapOrder 함수를 사용합니다.
		// To swap two players’ locations, you can use swapOrder function as shown
		// below.
		//
		// Solution.swapOrder(mIndexA, mIndexB);
		for (int i = 0; i < N; ++i) {
			org[i] = i + 1;
			mIndices[mOrder[i]] = i;
		}
		isRightGroup(0, N);
		for (int i = 0; i < N - 1; ++i) {
			int value = org[i];
			int index = mIndices[value];

			Solution.swapOrder(i, index);
			mIndices[mOrder[i]] = index;
			mIndices[value] = i;

			int temp = mOrder[i];
			mOrder[i] = mOrder[index];
			mOrder[index] = temp;
		}

	}

	private static boolean isRightGroup(int s, int e) {
		if (e - s <= 1)
			return true;

		int mid = (s + e) / 2;

		for (int i = 0; i < mid - s; i++) {
			winners[i] = Math.min(org[s + 2 * i], org[s + 2 * i + 1]);
			losers[i] = Math.max(org[s + 2 * i], org[s + 2 * i + 1]);

//			if (winners[i] > mid || losers[i] <= mid)
//				return false;
		}

		for (int i = 0; i < mid - s; i++) {
			org[s + i] = winners[i];
			org[mid + i] = losers[i];
		}

		return isRightGroup(s, mid) && isRightGroup(mid, e);
	}

}


